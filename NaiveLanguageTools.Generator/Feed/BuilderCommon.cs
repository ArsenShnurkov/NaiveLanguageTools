using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NaiveLanguageTools.Common;
using NaiveLanguageTools.Generator.AST;

namespace NaiveLanguageTools.Generator.Feed
{
    public abstract class BuilderCommon
    {
        protected IEnumerable<string> buildEnumConstants(ConstInfo constInfo, IEnumerable<string> names)
        {
            yield return "public enum " + constInfo.ClassName;
            yield return "{";
            yield return String.Join("," + Environment.NewLine, names);
            yield return "}";
        }
        protected IEnumerable<string> buildIntConstants(ConstInfo constInfo, IEnumerable<string> names)
        {
            yield return "public abstract class " + constInfo.ClassName;
            yield return "{";
            foreach (Tuple<string, int> pair in names.ZipWithIndex())
                yield return "public const int " + pair.Item1 + " = " + pair.Item2 + ";";
            yield return "}";
        }
        protected IEnumerable<string> buildConstants(ConstInfo constInfo, IEnumerable<string> names)
        {
            if (constInfo.Mode == ConstMode.Enum)
                return buildEnumConstants(constInfo, names);
            else
                return buildIntConstants(constInfo, names);
        }
        protected static string buildStringRep(string varName, StringRep<int> stringRep, Func<int, string> nameConvert)
        {
            return "var " + varName + " = StringRep.Create("
                + stringRep.Labels.Select(it => "Tuple.Create(" + nameConvert(it.Item1) + ",\"" + it.Item2 + "\")").Join("," + Environment.NewLine)
                + ");";
        }

        protected string getGrammarNameCard(Grammar grammar)
        {
            return "/* --------------------------------------------------------------------------"+Environment.NewLine
                +"THIS FILE WAS AUTOMATICALLY GENERATED BY NLT SUITE FROM \"" + grammar.Filename + "\" FILE"+Environment.NewLine
                +"-------------------------------------------------------------------------- */"+Environment.NewLine;
        }
        protected IEnumerable<string> buildNamespaceHeader(Grammar grammar)
        {
            yield return getGrammarNameCard(grammar);

            foreach (string ns in new HashSet<string>(grammar.UsingList.Concat(
                                        "System.Collections.Generic",
                                        "System.Linq",
                                        "System",

                                        "NaiveLanguageTools.Common",
                                        "NaiveLanguageTools.Parser",
                                        "NaiveLanguageTools.Parser.Automaton",
                                        "NaiveLanguageTools.Parser.Symbols",
                                        "NaiveLanguageTools.Lexer",
                                        grammar.Options.UseMRE? "NaiveLanguageTools.MultiRegex.Dfa":null)
                                        .Where(it => it!=null)))
                yield return "using " + ns + ";";

            yield return "";
            foreach (var s in buildNamespace(grammar.NamespaceName))
                yield return s;
        }
        protected IEnumerable<string> buildNamespace(string ns)
        {
            yield return "namespace " + ns;
            yield return "{";
        }
        protected IEnumerable<string> buildClassHeader(FactoryTypeInfo classInfo)
        {
            yield return "public partial class " + classInfo.ClassName + (classInfo.Parent != null ? ":" + classInfo.Parent : "");
            yield return "{";
            yield return classInfo.Code.Make(encloseStatements: false);
        }
        protected IEnumerable<string> buildClassFooter()
        {
            yield return "}"; // end of class
        }
        protected IEnumerable<string> buildNamespaceFooter()
        {
            yield return "}"; // end of namespace
        }
    }
}
