/* --------------------------------------------------------------------------
THIS FILE WAS AUTOMATICALLY GENERATED BY NLT SUITE FROM "Syntax.nlg" FILE
-------------------------------------------------------------------------- */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NaiveLanguageTools.Generator.AST;
using NaiveLanguageTools.Parser.InOut;
using NaiveLanguageTools.Generator.Builder;
using NaiveLanguageTools.Common;
using NaiveLanguageTools.Parser;
using NaiveLanguageTools.Parser.Automaton;
using NaiveLanguageTools.Parser.Symbols;
using NaiveLanguageTools.Lexer;
using NaiveLanguageTools.MultiRegex.Dfa;

namespace NaiveLanguageTools.Generator.Rules.Final
{
public abstract class StateEnum
{
public const int GRAMMAR = 0;
public const int COMMENT = 1;
public const int STR_GRAMMAR = 2;
public const int REGEX_GRAMMAR = 3;
public const int CODE_EXPR = 4;
public const int CODE_BLOCK = 5;
public const int IN_CODE_MACRO = 6;
public const int STR_CODE = 7;
public const int VERBATIM_STR_CODE = 8;
public const int OPTIONS_SECTION = 9;
public const int FACTORY_SECTION = 10;
public const int CHAR_CODE = 11;
}
public partial class LexerFactory:ILexerFactory
{
LexPattern lex_pattern = null;
  StringBuilder str_buf = null;
  bool code_statement = false;
  public static string IdentifierPattern { get { return identifier; } }
public const string identifier = @"[A-Za-z_][A-Za-z_0-9]*";
public NaiveLanguageTools.Lexer.Lexer<int,int> CreateLexer()
{
var symbols_rep = StringRep.Create(Tuple.Create(SymbolEnum.Error,"Error"),
Tuple.Create(SymbolEnum.EOF,"EOF"),
Tuple.Create(SymbolEnum.CODE_SNIPPET,"CODE_SNIPPET"),
Tuple.Create(SymbolEnum.RBRACE,"RBRACE"),
Tuple.Create(SymbolEnum.RMACRO,"RMACRO"),
Tuple.Create(SymbolEnum.USING,"USING"),
Tuple.Create(SymbolEnum.NAMESPACE,"NAMESPACE"),
Tuple.Create(SymbolEnum.PARSER,"PARSER"),
Tuple.Create(SymbolEnum.LEXER,"LEXER"),
Tuple.Create(SymbolEnum.OPTIONS,"OPTIONS"),
Tuple.Create(SymbolEnum.SEMI,"SEMI"),
Tuple.Create(SymbolEnum.TERMINALS,"TERMINALS"),
Tuple.Create(SymbolEnum.VAR,"VAR"),
Tuple.Create(SymbolEnum.PATTERNS,"PATTERNS"),
Tuple.Create(SymbolEnum.TYPES,"TYPES"),
Tuple.Create(SymbolEnum.TOKENS,"TOKENS"),
Tuple.Create(SymbolEnum.INT,"INT"),
Tuple.Create(SymbolEnum.STATES,"STATES"),
Tuple.Create(SymbolEnum.OVERRIDE,"OVERRIDE"),
Tuple.Create(SymbolEnum.PRECEDENCE,"PRECEDENCE"),
Tuple.Create(SymbolEnum.PARSING,"PARSING"),
Tuple.Create(SymbolEnum.SCANNING,"SCANNING"),
Tuple.Create(SymbolEnum.END,"END"),
Tuple.Create(SymbolEnum.EOF_ACTION,"EOF_ACTION"),
Tuple.Create(SymbolEnum.MARK,"MARK"),
Tuple.Create(SymbolEnum.EMPTY,"EMPTY"),
Tuple.Create(SymbolEnum.IDENTIFIER,"IDENTIFIER"),
Tuple.Create(SymbolEnum.COLON,"COLON"),
Tuple.Create(SymbolEnum.EQ,"EQ"),
Tuple.Create(SymbolEnum.RARROW,"RARROW"),
Tuple.Create(SymbolEnum.PIPE,"PIPE"),
Tuple.Create(SymbolEnum.QUESTION_MARK,"QUESTION_MARK"),
Tuple.Create(SymbolEnum.DOT,"DOT"),
Tuple.Create(SymbolEnum.LBRACKET,"LBRACKET"),
Tuple.Create(SymbolEnum.RBRACKET,"RBRACKET"),
Tuple.Create(SymbolEnum.LPAREN,"LPAREN"),
Tuple.Create(SymbolEnum.RPAREN,"RPAREN"),
Tuple.Create(SymbolEnum.LANGLE,"LANGLE"),
Tuple.Create(SymbolEnum.RANGLE,"RANGLE"),
Tuple.Create(SymbolEnum.ASTERISK,"ASTERISK"),
Tuple.Create(SymbolEnum.PLUS_OPT,"PLUS_OPT"),
Tuple.Create(SymbolEnum.PLUS,"PLUS"),
Tuple.Create(SymbolEnum.MINUS,"MINUS"),
Tuple.Create(SymbolEnum.PLUSPLUS,"PLUSPLUS"),
Tuple.Create(SymbolEnum.ACCENT,"ACCENT"),
Tuple.Create(SymbolEnum.HASH,"HASH"),
Tuple.Create(SymbolEnum.AT,"AT"),
Tuple.Create(SymbolEnum.EXCL,"EXCL"),
Tuple.Create(SymbolEnum.STRING,"STRING"),
Tuple.Create(SymbolEnum.REGEX,"REGEX"),
Tuple.Create(SymbolEnum.LMACRO,"LMACRO"),
Tuple.Create(SymbolEnum.COMMA,"COMMA"),
Tuple.Create(SymbolEnum.LBRACE,"LBRACE"),
Tuple.Create(SymbolEnum.CODE_PLACEHOLDER,"CODE_PLACEHOLDER"),
Tuple.Create(SymbolEnum.start_symbol,"start_symbol"),
Tuple.Create(SymbolEnum.dot_identifier,"dot_identifier"),
Tuple.Create(SymbolEnum.typename_list,"typename_list"),
Tuple.Create(SymbolEnum.typename,"typename"),
Tuple.Create(SymbolEnum.grammar,"grammar"),
Tuple.Create(SymbolEnum.grammar_elements,"grammar_elements"),
Tuple.Create(SymbolEnum.grammar_elem,"grammar_elem"),
Tuple.Create(SymbolEnum.opt_ns_list,"opt_ns_list"),
Tuple.Create(SymbolEnum.opt_id_list,"opt_id_list"),
Tuple.Create(SymbolEnum.opt_types,"opt_types"),
Tuple.Create(SymbolEnum.id_list,"id_list"),
Tuple.Create(SymbolEnum.type_info,"type_info"),
Tuple.Create(SymbolEnum.opt_taboo_group,"opt_taboo_group"),
Tuple.Create(SymbolEnum.option,"option"),
Tuple.Create(SymbolEnum.option_list,"option_list"),
Tuple.Create(SymbolEnum.factory_name,"factory_name"),
Tuple.Create(SymbolEnum.factory_params,"factory_params"),
Tuple.Create(SymbolEnum.factory_extend,"factory_extend"),
Tuple.Create(SymbolEnum.factory_info,"factory_info"),
Tuple.Create(SymbolEnum.opt_prec_entries,"opt_prec_entries"),
Tuple.Create(SymbolEnum.id_list_spaced,"id_list_spaced"),
Tuple.Create(SymbolEnum.rich_precedence_word,"rich_precedence_word"),
Tuple.Create(SymbolEnum.opt_rich_prec_word_list,"opt_rich_prec_word_list"),
Tuple.Create(SymbolEnum.input_list,"input_list"),
Tuple.Create(SymbolEnum.prec_entry,"prec_entry"),
Tuple.Create(SymbolEnum.op_assoc,"op_assoc"),
Tuple.Create(SymbolEnum.op_prec_entry,"op_prec_entry"),
Tuple.Create(SymbolEnum.prec_entry_line,"prec_entry_line"),
Tuple.Create(SymbolEnum.state_item,"state_item"),
Tuple.Create(SymbolEnum.def_state_item,"def_state_item"),
Tuple.Create(SymbolEnum.opt_mixed_state_list,"opt_mixed_state_list"),
Tuple.Create(SymbolEnum.state_list,"state_list"),
Tuple.Create(SymbolEnum.lex_pattern_expr,"lex_pattern_expr"),
Tuple.Create(SymbolEnum.variable,"variable"),
Tuple.Create(SymbolEnum.single_lex_pattern,"single_lex_pattern"),
Tuple.Create(SymbolEnum.combo_lex_pattern,"combo_lex_pattern"),
Tuple.Create(SymbolEnum.lex_pattern,"lex_pattern"),
Tuple.Create(SymbolEnum.opt_context,"opt_context"),
Tuple.Create(SymbolEnum.context_alt_list,"context_alt_list"),
Tuple.Create(SymbolEnum.context_list,"context_list"),
Tuple.Create(SymbolEnum.state_action,"state_action"),
Tuple.Create(SymbolEnum.lex_item_group,"lex_item_group"),
Tuple.Create(SymbolEnum.opt_lex_items,"opt_lex_items"),
Tuple.Create(SymbolEnum.code_mix,"code_mix"),
Tuple.Create(SymbolEnum.macro_ctrl,"macro_ctrl"),
Tuple.Create(SymbolEnum.code_macro,"code_macro"),
Tuple.Create(SymbolEnum.code_atom,"code_atom"),
Tuple.Create(SymbolEnum.code_body,"code_body"),
Tuple.Create(SymbolEnum.braced_opt_code_body,"braced_opt_code_body"),
Tuple.Create(SymbolEnum.dynamic_token,"dynamic_token"),
Tuple.Create(SymbolEnum.named_symbol,"named_symbol"),
Tuple.Create(SymbolEnum.anon_symbol,"anon_symbol"),
Tuple.Create(SymbolEnum.symbol,"symbol"),
Tuple.Create(SymbolEnum.deco_symbol,"deco_symbol"),
Tuple.Create(SymbolEnum.sym_list,"sym_list"),
Tuple.Create(SymbolEnum.sym_list_block,"sym_list_block"),
Tuple.Create(SymbolEnum.opt_repetition,"opt_repetition"),
Tuple.Create(SymbolEnum.repetition,"repetition"),
Tuple.Create(SymbolEnum.group,"group"),
Tuple.Create(SymbolEnum.opt_group_list,"opt_group_list"),
Tuple.Create(SymbolEnum.opt_alt_action,"opt_alt_action"),
Tuple.Create(SymbolEnum.alt,"alt"),
Tuple.Create(SymbolEnum.alt_list,"alt_list"),
Tuple.Create(SymbolEnum.prod,"prod"),
Tuple.Create(SymbolEnum.opt_prod_list,"opt_prod_list"),
Tuple.Create(SymbolEnum.__list___merged_op_prec_entry_assoc____,"__list___merged_op_prec_entry_assoc____"),
Tuple.Create(SymbolEnum.__list___merged_op_prec_entry_prod____,"__list___merged_op_prec_entry_prod____"));
var states_rep = StringRep.Create(Tuple.Create(StateEnum.GRAMMAR,"GRAMMAR"),
Tuple.Create(StateEnum.COMMENT,"COMMENT"),
Tuple.Create(StateEnum.STR_GRAMMAR,"STR_GRAMMAR"),
Tuple.Create(StateEnum.REGEX_GRAMMAR,"REGEX_GRAMMAR"),
Tuple.Create(StateEnum.CODE_EXPR,"CODE_EXPR"),
Tuple.Create(StateEnum.CODE_BLOCK,"CODE_BLOCK"),
Tuple.Create(StateEnum.IN_CODE_MACRO,"IN_CODE_MACRO"),
Tuple.Create(StateEnum.STR_CODE,"STR_CODE"),
Tuple.Create(StateEnum.VERBATIM_STR_CODE,"VERBATIM_STR_CODE"),
Tuple.Create(StateEnum.OPTIONS_SECTION,"OPTIONS_SECTION"),
Tuple.Create(StateEnum.FACTORY_SECTION,"FACTORY_SECTION"),
Tuple.Create(StateEnum.CHAR_CODE,"CHAR_CODE"));
var mre = new DfaTable(ConnectionTable.Create(0,new int []{8,8,8,8,8,8,8,8,8,6,45,6,6,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,9,10,11,12,13,8,14,15,16,3,17,18,19,20,2,8,8,8,8,8,8,8,8,8,8,21,22,23,24,25,26,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,30,31,32,28,8,28,28,28,28,33,28,28,28,34,28,28,35,28,36,37,38,28,28,39,40,1,41,28,28,28,28,42,43,44,8,8,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-1,-1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4}), //0
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,47,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //1
ConnectionTable.Create(42,new int []{50,-1,-1,-1,-1,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,51},Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(77,false),Tuple.Create(78,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //2
ConnectionTable.Create(47,new int []{52},Tuple.Create(37,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //3
ConnectionTable.Create(160,new int []{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}), //4
ConnectionTable.Create(10,new int []{46,-1,-1,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8}), //5
ConnectionTable.Create(9,new int []{53,53,53,53,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53},Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(82,false),Tuple.Create(83,false),Tuple.Create(84,false),Tuple.Create(102,false),Tuple.Create(105,false)), //6
ConnectionTable.Create(9,new int []{53,53,53,53,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53},Tuple.Create(55,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(82,false),Tuple.Create(83,false),Tuple.Create(84,false),Tuple.Create(102,false),Tuple.Create(105,false)), //7
ConnectionTable.Create(-1,new int []{},Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //8
ConnectionTable.Create(-1,new int []{},Tuple.Create(45,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //9
ConnectionTable.Create(34,new int []{55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,54},Tuple.Create(50,false),Tuple.Create(52,false),Tuple.Create(57,false),Tuple.Create(58,false),Tuple.Create(59,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //10
ConnectionTable.Create(-1,new int []{},Tuple.Create(43,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //11
ConnectionTable.Create(40,new int []{57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-1,-1,-1,-1,56,-1,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56},Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //12
ConnectionTable.Create(69,new int []{60,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,58,-1,-1,-1,-1,-1,-1,-1,59},Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //13
ConnectionTable.Create(-1,new int []{},Tuple.Create(53,false),Tuple.Create(54,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //14
ConnectionTable.Create(-1,new int []{},Tuple.Create(33,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(87,false),Tuple.Create(92,false),Tuple.Create(96,false),Tuple.Create(102,false),Tuple.Create(105,false)), //15
ConnectionTable.Create(-1,new int []{},Tuple.Create(34,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(88,false),Tuple.Create(98,false),Tuple.Create(102,false),Tuple.Create(105,false)), //16
ConnectionTable.Create(43,new int []{61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62},Tuple.Create(39,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //17
ConnectionTable.Create(-1,new int []{},Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(89,false),Tuple.Create(90,false),Tuple.Create(102,false),Tuple.Create(105,false)), //18
ConnectionTable.Create(62,new int []{63},Tuple.Create(40,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //19
ConnectionTable.Create(-1,new int []{},Tuple.Create(30,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //20
ConnectionTable.Create(-1,new int []{},Tuple.Create(25,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(86,false),Tuple.Create(102,false),Tuple.Create(105,false)), //21
ConnectionTable.Create(-1,new int []{},Tuple.Create(5,false),Tuple.Create(24,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(91,false),Tuple.Create(101,false),Tuple.Create(102,false),Tuple.Create(105,false)), //22
ConnectionTable.Create(-1,new int []{},Tuple.Create(35,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //23
ConnectionTable.Create(-1,new int []{},Tuple.Create(26,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //24
ConnectionTable.Create(-1,new int []{},Tuple.Create(36,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //25
ConnectionTable.Create(-1,new int []{},Tuple.Create(29,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //26
ConnectionTable.Create(34,new int []{64},Tuple.Create(44,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //27
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //28
ConnectionTable.Create(-1,new int []{},Tuple.Create(31,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //29
ConnectionTable.Create(0,new int []{68,68,68,68,68,68,68,68,68,68,-1,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,68,68,68,68,70,68,68,68,68,68,68,68,65,71,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,72,68,68,68,68,68,68,73,68,68,68,68,74,75,68,68,68,76,68,68,68,68,68,68,68,77,68,68,68,78,68,79,80,81,68,82,68,68,68,68,68,68,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66},Tuple.Create(57,false),Tuple.Create(75,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //30
ConnectionTable.Create(-1,new int []{},Tuple.Create(32,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //31
ConnectionTable.Create(-1,new int []{},Tuple.Create(42,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //32
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,83,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //33
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,84,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //34
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,85,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //35
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,86,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //36
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,87,48,48,48,48,48,88,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //37
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,89,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,90,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //38
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,91,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,92,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //39
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,93,48,48,48,48,48,48,48,48,48,94,48,48,48,48,48,48,48,48,48,95,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //40
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,96,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(100,false),Tuple.Create(102,false),Tuple.Create(105,false)), //41
ConnectionTable.Create(-1,new int []{},Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(93,false),Tuple.Create(94,false),Tuple.Create(95,false),Tuple.Create(102,false),Tuple.Create(105,false)), //42
ConnectionTable.Create(-1,new int []{},Tuple.Create(28,false),Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(102,false),Tuple.Create(105,false)), //43
ConnectionTable.Create(-1,new int []{},Tuple.Create(57,false),Tuple.Create(76,false),Tuple.Create(81,false),Tuple.Create(97,false),Tuple.Create(102,false),Tuple.Create(105,false)), //44
ConnectionTable.Create(9,new int []{53,53,53,53,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53},Tuple.Create(55,false),Tuple.Create(82,false),Tuple.Create(83,false),Tuple.Create(84,false),Tuple.Create(105,false)), //45
ConnectionTable.Create(-1,new int []{},Tuple.Create(105,false)), //46
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,97,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //47
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //48
ConnectionTable.Create(0,new int []{}), //49
ConnectionTable.Create(-1,new int []{},Tuple.Create(103,false)), //50
ConnectionTable.Create(-1,new int []{},Tuple.Create(79,false)), //51
ConnectionTable.Create(-1,new int []{},Tuple.Create(104,false),Tuple.Create(106,false)), //52
ConnectionTable.Create(9,new int []{53,53,53,53,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53},Tuple.Create(82,false),Tuple.Create(83,false),Tuple.Create(84,false)), //53
ConnectionTable.Create(-1,new int []{},Tuple.Create(60,false)), //54
ConnectionTable.Create(-1,new int []{},Tuple.Create(49,false)), //55
ConnectionTable.Create(48,new int []{102,102,102,102,102,102,102,102,102,102,-1,-1,-1,-1,-1,-1,-1,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-1,-1,-1,-1,102,-1,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102},Tuple.Create(99,false)), //56
ConnectionTable.Create(-1,new int []{},Tuple.Create(85,false)), //57
ConnectionTable.Create(109,new int []{103}), //58
ConnectionTable.Create(97,new int []{104}), //59
ConnectionTable.Create(79,new int []{105}), //60
ConnectionTable.Create(-1,new int []{},Tuple.Create(41,false)), //61
ConnectionTable.Create(-1,new int []{},Tuple.Create(38,false)), //62
ConnectionTable.Create(-1,new int []{},Tuple.Create(27,false)), //63
ConnectionTable.Create(-1,new int []{},Tuple.Create(51,false)), //64
ConnectionTable.Create(-1,new int []{},Tuple.Create(74,false),Tuple.Create(80,false)), //65
ConnectionTable.Create(160,new int []{67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67}), //66
ConnectionTable.Create(128,new int []{68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68}), //67
ConnectionTable.Create(-1,new int []{},Tuple.Create(74,false)), //68
ConnectionTable.Create(-1,new int []{},Tuple.Create(47,false),Tuple.Create(70,false),Tuple.Create(74,false)), //69
ConnectionTable.Create(-1,new int []{},Tuple.Create(48,false),Tuple.Create(69,false),Tuple.Create(74,false)), //70
ConnectionTable.Create(-1,new int []{},Tuple.Create(61,false),Tuple.Create(74,false)), //71
ConnectionTable.Create(48,new int []{106,106,106,106,106,106,106,106,106,106,-1,-1,-1,-1,-1,-1,-1,106,106,106,106,106,106,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,106,106,106,106,106,106},Tuple.Create(74,false)), //72
ConnectionTable.Create(-1,new int []{},Tuple.Create(46,false),Tuple.Create(56,false),Tuple.Create(74,false)), //73
ConnectionTable.Create(-1,new int []{},Tuple.Create(62,false),Tuple.Create(74,false)), //74
ConnectionTable.Create(-1,new int []{},Tuple.Create(63,false),Tuple.Create(74,false)), //75
ConnectionTable.Create(-1,new int []{},Tuple.Create(64,false),Tuple.Create(74,false)), //76
ConnectionTable.Create(-1,new int []{},Tuple.Create(65,false),Tuple.Create(74,false)), //77
ConnectionTable.Create(-1,new int []{},Tuple.Create(66,false),Tuple.Create(74,false)), //78
ConnectionTable.Create(-1,new int []{},Tuple.Create(67,false),Tuple.Create(74,false)), //79
ConnectionTable.Create(48,new int []{107,107,107,107,107,107,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,107,107,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,107,107,107,107,107},Tuple.Create(74,false)), //80
ConnectionTable.Create(-1,new int []{},Tuple.Create(68,false),Tuple.Create(74,false)), //81
ConnectionTable.Create(48,new int []{108,108,108,108,108,108,108,108,108,108,-1,-1,-1,-1,-1,-1,-1,108,108,108,108,108,108,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,108,108,108,108,108},Tuple.Create(74,false)), //82
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,109,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //83
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,110,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //84
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,111,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //85
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,112,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //86
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,113,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //87
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,114,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //88
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,115,48,116,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //89
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,117,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //90
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,118,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //91
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,119,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //92
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,120,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //93
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,121,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //94
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,122,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //95
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,123,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //96
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,124,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //97
ConnectionTable.Create(160,new int []{99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99}), //98
ConnectionTable.Create(128,new int []{100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100}), //99
ConnectionTable.Create(0,new int []{100,100,100,100,100,100,100,100,100,100,101,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98}), //100
ConnectionTable.Create(-1,new int []{},Tuple.Create(107,false)), //101
ConnectionTable.Create(48,new int []{102,102,102,102,102,102,102,102,102,102,-1,-1,-1,-1,-1,-1,-1,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-1,-1,-1,-1,102,-1,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102},Tuple.Create(99,false)), //102
ConnectionTable.Create(112,new int []{125}), //103
ConnectionTable.Create(114,new int []{126}), //104
ConnectionTable.Create(70,new int []{127}), //105
ConnectionTable.Create(48,new int []{128,128,128,128,128,128,128,128,128,128,-1,-1,-1,-1,-1,-1,-1,128,128,128,128,128,128,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,128,128,128,128,128,128}), //106
ConnectionTable.Create(48,new int []{129,129,129,129,129,129,129,129,129,129,-1,-1,-1,-1,-1,-1,-1,129,129,129,129,129,129,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,129,129,129,129,129,129}), //107
ConnectionTable.Create(48,new int []{130,130,130,130,130,130,130,130,130,130,-1,-1,-1,-1,-1,-1,-1,130,130,130,130,130,130,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,130,130,130,130,130,130},Tuple.Create(71,false)), //108
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(19,false),Tuple.Create(23,false),Tuple.Create(100,false)), //109
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(11,false),Tuple.Create(12,false),Tuple.Create(23,false),Tuple.Create(100,false)), //110
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,131,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //111
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,132,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //112
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,133,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //113
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,134,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //114
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,135,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //115
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,136,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //116
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,137,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //117
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,138,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //118
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,139,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //119
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,140,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //120
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,141,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //121
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,142,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //122
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(7,false),Tuple.Create(23,false),Tuple.Create(100,false)), //123
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,143,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //124
ConnectionTable.Create(116,new int []{144}), //125
ConnectionTable.Create(107,new int []{145}), //126
ConnectionTable.Create(-1,new int []{},Tuple.Create(20,false)), //127
ConnectionTable.Create(48,new int []{146,146,146,146,146,146,146,146,146,146,-1,-1,-1,-1,-1,-1,-1,146,146,146,146,146,146,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,146,146,146,146,146,146}), //128
ConnectionTable.Create(48,new int []{147,147,147,147,147,147,147,147,147,147,-1,-1,-1,-1,-1,-1,-1,147,147,147,147,147,147,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,147,147,147,147,147,147}), //129
ConnectionTable.Create(48,new int []{148,148,148,148,148,148,148,148,148,148,-1,-1,-1,-1,-1,-1,-1,148,148,148,148,148,148,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,148,148,148,148,148,148},Tuple.Create(71,false)), //130
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,149,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //131
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,150,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //132
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,151,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //133
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,152,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //134
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,153,48,48,48,154,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //135
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,155,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //136
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,156,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //137
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,157,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //138
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,158,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //139
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,159,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //140
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,160,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //141
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,161,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //142
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(0,false),Tuple.Create(23,false),Tuple.Create(100,false)), //143
ConnectionTable.Create(121,new int []{162}), //144
ConnectionTable.Create(-1,new int []{},Tuple.Create(21,false)), //145
ConnectionTable.Create(48,new int []{163,163,163,163,163,163,163,163,163,163,-1,-1,-1,-1,-1,-1,-1,163,163,163,163,163,163,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,163,163,163,163,163,163}), //146
ConnectionTable.Create(48,new int []{164,164,164,164,164,164,164,164,164,164,-1,-1,-1,-1,-1,-1,-1,164,164,164,164,164,164,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,164,164,164,164,164,164}), //147
ConnectionTable.Create(48,new int []{165,165,165,165,165,165,165,165,165,165,-1,-1,-1,-1,-1,-1,-1,165,165,165,165,165,165,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,165,165,165,165,165,165},Tuple.Create(71,false)), //148
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(3,false),Tuple.Create(23,false),Tuple.Create(100,false)), //149
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,166,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //150
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,167,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //151
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,168,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //152
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,169,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //153
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,170,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //154
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,171,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //155
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,172,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //156
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,173,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //157
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,174,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //158
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,175,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //159
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,176,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //160
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(9,false),Tuple.Create(23,false),Tuple.Create(100,false)), //161
ConnectionTable.Create(-1,new int []{},Tuple.Create(22,false)), //162
ConnectionTable.Create(48,new int []{177,177,177,177,177,177,177,177,177,177,-1,-1,-1,-1,-1,-1,-1,177,177,177,177,177,177,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,177,177,177,177,177,177}), //163
ConnectionTable.Create(-1,new int []{},Tuple.Create(72,false)), //164
ConnectionTable.Create(-1,new int []{},Tuple.Create(71,false)), //165
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,178,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //166
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,179,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //167
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,180,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //168
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(2,false),Tuple.Create(23,false),Tuple.Create(100,false)), //169
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,181,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //170
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,182,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //171
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,183,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //172
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,184,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //173
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(15,false),Tuple.Create(23,false),Tuple.Create(100,false)), //174
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,185,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //175
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(10,false),Tuple.Create(23,false),Tuple.Create(100,false)), //176
ConnectionTable.Create(48,new int []{186,186,186,186,186,186,186,186,186,186,-1,-1,-1,-1,-1,-1,-1,186,186,186,186,186,186,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,186,186,186,186,186,186}), //177
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,187,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //178
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(4,false),Tuple.Create(23,false),Tuple.Create(100,false)), //179
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,188,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //180
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(17,false),Tuple.Create(23,false),Tuple.Create(100,false)), //181
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,189,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //182
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,190,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //183
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,191,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //184
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,192,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //185
ConnectionTable.Create(48,new int []{193,193,193,193,193,193,193,193,193,193,-1,-1,-1,-1,-1,-1,-1,193,193,193,193,193,193,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,193,193,193,193,193,193}), //186
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,194,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //187
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(13,false),Tuple.Create(14,false),Tuple.Create(23,false),Tuple.Create(100,false)), //188
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(8,false),Tuple.Create(23,false),Tuple.Create(100,false)), //189
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,195,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //190
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(18,false),Tuple.Create(23,false),Tuple.Create(100,false)), //191
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,196,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //192
ConnectionTable.Create(48,new int []{197,197,197,197,197,197,197,197,197,197,-1,-1,-1,-1,-1,-1,-1,197,197,197,197,197,197,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,197,197,197,197,197,197}), //193
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(1,false),Tuple.Create(23,false),Tuple.Create(100,false)), //194
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,198,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(23,false),Tuple.Create(100,false)), //195
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(6,false),Tuple.Create(23,false),Tuple.Create(100,false)), //196
ConnectionTable.Create(-1,new int []{},Tuple.Create(73,false)), //197
ConnectionTable.Create(48,new int []{48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,-1,-1,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-1,-1,-1,-1,48,-1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48},Tuple.Create(16,false),Tuple.Create(23,false),Tuple.Create(100,false))); //198
var lexer = new NaiveLanguageTools.Lexer.Lexer<int,int>(symbols_rep,states_rep,StateEnum.GRAMMAR,SymbolEnum.EOF,SymbolEnum.Error,mre);
lexer.AddIdRule(0,"\""+"using"+"\"",StringCaseComparison.Sensitive,SymbolEnum.USING,StateEnum.GRAMMAR);
lexer.AddIdRule(1,"\""+"namespace"+"\"",StringCaseComparison.Sensitive,SymbolEnum.NAMESPACE,StateEnum.GRAMMAR);
lexer.AddIdAction(2,"\""+"parser"+"\"",StringCaseComparison.Sensitive,(TokenMatch<int> match) => {match.Token = SymbolEnum.PARSER;
lexer.PushState(StateEnum.FACTORY_SECTION);
},StateEnum.GRAMMAR);
lexer.AddIdAction(3,"\""+"lexer"+"\"",StringCaseComparison.Sensitive,(TokenMatch<int> match) => {match.Token = SymbolEnum.LEXER;
lexer.PushState(StateEnum.FACTORY_SECTION);
},StateEnum.GRAMMAR);
lexer.AddIdAction(4,"\""+"options"+"\"",StringCaseComparison.Sensitive,(TokenMatch<int> match) => {match.Token = SymbolEnum.OPTIONS;
lexer.PushState(StateEnum.OPTIONS_SECTION);
},StateEnum.GRAMMAR);
lexer.AddIdAction(5,"\""+";"+"\"",StringCaseComparison.Sensitive,(TokenMatch<int> match) => {match.Token = SymbolEnum.SEMI;
lexer.PopState();
},StateEnum.FACTORY_SECTION,StateEnum.OPTIONS_SECTION);
lexer.AddIdRule(6,"\""+"terminals"+"\"",StringCaseComparison.Sensitive,SymbolEnum.TERMINALS,StateEnum.GRAMMAR);
lexer.AddIdRule(7,"\""+"var"+"\"",StringCaseComparison.Sensitive,SymbolEnum.VAR,StateEnum.GRAMMAR);
lexer.AddIdRule(8,"\""+"patterns"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PATTERNS,StateEnum.GRAMMAR);
lexer.AddIdRule(9,"\""+"types"+"\"",StringCaseComparison.Sensitive,SymbolEnum.TYPES,StateEnum.GRAMMAR);
lexer.AddIdRule(10,"\""+"tokens"+"\"",StringCaseComparison.Sensitive,SymbolEnum.TOKENS,StateEnum.GRAMMAR);
lexer.AddIdRule(new[]{SymbolEnum.TOKENS},11,"\""+"int"+"\"",StringCaseComparison.Sensitive,SymbolEnum.INT,StateEnum.GRAMMAR);
lexer.AddIdRule(new[]{SymbolEnum.STATES},12,"\""+"int"+"\"",StringCaseComparison.Sensitive,SymbolEnum.INT,StateEnum.GRAMMAR);
lexer.AddIdRule(new[]{SymbolEnum.LEXER},13,"\""+"override"+"\"",StringCaseComparison.Sensitive,SymbolEnum.OVERRIDE,StateEnum.FACTORY_SECTION);
lexer.AddIdRule(new[]{SymbolEnum.PARSER},14,"\""+"override"+"\"",StringCaseComparison.Sensitive,SymbolEnum.OVERRIDE,StateEnum.FACTORY_SECTION);
lexer.AddIdRule(15,"\""+"states"+"\"",StringCaseComparison.Sensitive,SymbolEnum.STATES,StateEnum.GRAMMAR);
lexer.AddIdRule(16,"\""+"precedence"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PRECEDENCE,StateEnum.GRAMMAR);
lexer.AddIdRule(17,"\""+"parsing"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PARSING,StateEnum.GRAMMAR);
lexer.AddIdRule(18,"\""+"scanning"+"\"",StringCaseComparison.Sensitive,SymbolEnum.SCANNING,StateEnum.GRAMMAR);
lexer.AddIdRule(19,"\""+"end"+"\"",StringCaseComparison.Sensitive,SymbolEnum.END,StateEnum.GRAMMAR);
lexer.AddIdRule(20,"\""+"%EOF"+"\"",StringCaseComparison.Sensitive,SymbolEnum.EOF_ACTION,StateEnum.GRAMMAR);
lexer.AddIdRule(21,"\""+"%mark"+"\"",StringCaseComparison.Sensitive,SymbolEnum.MARK,StateEnum.GRAMMAR);
lexer.AddIdRule(22,"\""+"%empty"+"\"",StringCaseComparison.Sensitive,SymbolEnum.EMPTY,StateEnum.GRAMMAR);
lexer.AddIdRule(23,"/"+@"[A-Za-z_][A-Za-z_0-9]*"+"/",StringCaseComparison.Sensitive,SymbolEnum.IDENTIFIER,StateEnum.FACTORY_SECTION,StateEnum.OPTIONS_SECTION,StateEnum.GRAMMAR);
lexer.AddIdRule(24,"\""+";"+"\"",StringCaseComparison.Sensitive,SymbolEnum.SEMI,StateEnum.GRAMMAR);
lexer.AddIdRule(25,"\""+":"+"\"",StringCaseComparison.Sensitive,SymbolEnum.COLON,StateEnum.FACTORY_SECTION,StateEnum.GRAMMAR);
lexer.AddIdRule(26,"\""+"="+"\"",StringCaseComparison.Sensitive,SymbolEnum.EQ,StateEnum.GRAMMAR);
lexer.AddIdRule(27,"\""+"->"+"\"",StringCaseComparison.Sensitive,SymbolEnum.RARROW,StateEnum.GRAMMAR);
lexer.AddIdRule(28,"\""+"|"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PIPE,StateEnum.GRAMMAR);
lexer.AddIdRule(29,"\""+"?"+"\"",StringCaseComparison.Sensitive,SymbolEnum.QUESTION_MARK,StateEnum.GRAMMAR);
lexer.AddIdRule(30,"\""+"."+"\"",StringCaseComparison.Sensitive,SymbolEnum.DOT,StateEnum.FACTORY_SECTION,StateEnum.GRAMMAR);
lexer.AddIdRule(31,"\""+"["+"\"",StringCaseComparison.Sensitive,SymbolEnum.LBRACKET,StateEnum.GRAMMAR);
lexer.AddIdRule(32,"\""+"]"+"\"",StringCaseComparison.Sensitive,SymbolEnum.RBRACKET,StateEnum.GRAMMAR);
lexer.AddIdRule(33,"\""+"("+"\"",StringCaseComparison.Sensitive,SymbolEnum.LPAREN,StateEnum.GRAMMAR);
lexer.AddIdRule(34,"\""+")"+"\"",StringCaseComparison.Sensitive,SymbolEnum.RPAREN,StateEnum.GRAMMAR);
lexer.AddIdRule(35,"\""+"<"+"\"",StringCaseComparison.Sensitive,SymbolEnum.LANGLE,StateEnum.FACTORY_SECTION,StateEnum.GRAMMAR);
lexer.AddIdRule(36,"\""+">"+"\"",StringCaseComparison.Sensitive,SymbolEnum.RANGLE,StateEnum.FACTORY_SECTION,StateEnum.GRAMMAR);
lexer.AddIdRule(37,"\""+"*"+"\"",StringCaseComparison.Sensitive,SymbolEnum.ASTERISK,StateEnum.GRAMMAR);
lexer.AddIdRule(38,"\""+"+?"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PLUS_OPT,StateEnum.GRAMMAR);
lexer.AddIdRule(39,"\""+"+"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PLUS,StateEnum.OPTIONS_SECTION,StateEnum.GRAMMAR);
lexer.AddIdRule(40,"\""+"-"+"\"",StringCaseComparison.Sensitive,SymbolEnum.MINUS,StateEnum.OPTIONS_SECTION,StateEnum.GRAMMAR);
lexer.AddIdRule(41,"\""+"++"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PLUSPLUS,StateEnum.GRAMMAR);
lexer.AddIdRule(42,"\""+"^"+"\"",StringCaseComparison.Sensitive,SymbolEnum.ACCENT,StateEnum.GRAMMAR);
lexer.AddIdRule(43,"\""+"#"+"\"",StringCaseComparison.Sensitive,SymbolEnum.HASH,StateEnum.GRAMMAR);
lexer.AddIdRule(44,"\""+"@"+"\"",StringCaseComparison.Sensitive,SymbolEnum.AT,StateEnum.GRAMMAR);
lexer.AddIdRule(45,"\""+"!"+"\"",StringCaseComparison.Sensitive,SymbolEnum.EXCL,StateEnum.GRAMMAR);
lexer.AddIdAction(46,"\""+"\\\\"+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);},StateEnum.CHAR_CODE,StateEnum.STR_CODE);
lexer.AddIdAction(47,"\""+"\\\""+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);},StateEnum.CHAR_CODE,StateEnum.STR_CODE);
lexer.AddIdAction(48,"\""+"\\\'"+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);},StateEnum.CHAR_CODE,StateEnum.STR_CODE);
lexer.AddIdAction(49,"\""+"\"\""+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);},StateEnum.VERBATIM_STR_CODE);
lexer.AddIdAction(50,"\""+"\""+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);lexer.PushState(StateEnum.STR_CODE);},StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(51,"\""+"@\""+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);lexer.PushState(StateEnum.VERBATIM_STR_CODE);},StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(52,"\""+"\""+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);lexer.PopState();},StateEnum.STR_CODE,StateEnum.VERBATIM_STR_CODE);
lexer.AddIdAction(53,"\""+"'"+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);lexer.PushState(StateEnum.CHAR_CODE);},StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(54,"\""+"'"+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);lexer.PopState();},StateEnum.CHAR_CODE);
lexer.AddIdAction(55,"/"+@"\r|\n"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.Error;
match.Value = "New line not allowed inside a string/regex";},StateEnum.CHAR_CODE,StateEnum.REGEX_GRAMMAR,StateEnum.STR_CODE,StateEnum.STR_GRAMMAR);
lexer.AddIdAction(56,"\""+"\\\\"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, @"\");},StateEnum.STR_GRAMMAR,StateEnum.REGEX_GRAMMAR);
lexer.AddIdAction(57,"/"+@"."+"/",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);},StateEnum.CHAR_CODE,StateEnum.STR_CODE,StateEnum.VERBATIM_STR_CODE);
lexer.AddIdAction(58,"\""+"\""+"\"",StringCaseComparison.Sensitive,match => {lex_pattern = new LexPattern(LexPattern.TypeEnum.String);lexer.PushState(StateEnum.STR_GRAMMAR);},StateEnum.GRAMMAR);
lexer.AddIdAction(59,"\""+"\""+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.STRING;
match.Value = lex_pattern.SetStringComparison(StringCaseComparison.Sensitive);
                lex_pattern = null;lexer.PopState();},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(60,"\""+"\"i"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.STRING;
match.Value = lex_pattern.SetStringComparison(StringCaseComparison.Insensitive);
                lex_pattern = null;lexer.PopState();},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(61,"\""+"\\0"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\0");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(62,"\""+"\\a"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\a");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(63,"\""+"\\b"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\b");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(64,"\""+"\\f"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\f");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(65,"\""+"\\n"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\n");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(66,"\""+"\\r"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\r");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(67,"\""+"\\t"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\t");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(68,"\""+"\\v"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\v");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(69,"\""+"\\'"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\'");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(70,"\""+"\\\""+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.AddSpecial(match.Text, "\"");},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(71,"/"+@"\\x[0-9a-fA-F]{1,4}"+"/",StringCaseComparison.Sensitive,match => {lex_pattern.AddHexCode(match.Text, match.Text.Substring(2));},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(72,"/"+@"\\u[0-9a-fA-F]{4}"+"/",StringCaseComparison.Sensitive,match => {lex_pattern.AddHexCode(match.Text, match.Text.Substring(2));},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(73,"/"+@"\\U[0-9a-fA-F]{8}"+"/",StringCaseComparison.Sensitive,match => {lex_pattern.AddHexCode(match.Text, match.Text.Substring(2));},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(74,"/"+@"\\."+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.Error;
match.Value = "Unrecognized escape sequence \""+match.Text.Substring(1)+"\"";},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(75,"/"+@"\\"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.Error;
match.Value = "Empty escape sequence";},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(76,"/"+@"."+"/",StringCaseComparison.Sensitive,match => {lex_pattern.Add(match.Text);},StateEnum.STR_GRAMMAR);
lexer.AddIdAction(77,"\""+"/"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern = new LexPattern(LexPattern.TypeEnum.Regex);lexer.PushState(StateEnum.REGEX_GRAMMAR);},StateEnum.GRAMMAR);
lexer.AddIdAction(78,"\""+"/"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.REGEX;
match.Value = lex_pattern.SetStringComparison(StringCaseComparison.Sensitive);
                  lex_pattern = null;lexer.PopState();},StateEnum.REGEX_GRAMMAR);
lexer.AddIdAction(79,"\""+"/i"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.REGEX;
match.Value = lex_pattern.SetStringComparison(StringCaseComparison.Insensitive);
                    lex_pattern = null;lexer.PopState();},StateEnum.REGEX_GRAMMAR);
lexer.AddIdAction(80,"\""+"\\/"+"\"",StringCaseComparison.Sensitive,match => {lex_pattern.Add(match.Text.Substring(1));},StateEnum.REGEX_GRAMMAR);
lexer.AddIdAction(81,"/"+@"."+"/",StringCaseComparison.Sensitive,match => {lex_pattern.Add(match.Text);},StateEnum.REGEX_GRAMMAR);
lexer.AddIdAction(new[]{SymbolEnum.LMACRO},82,"/"+@"[ \r\n\f\t\u000b]+"+"/",StringCaseComparison.Sensitive,match => {},StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(83,"/"+@"[ \r\n\f\t\u000b]+"+"/",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);},StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(84,"/"+@"[ \r\n\f\t\u000b]+"+"/",StringCaseComparison.Sensitive,match => {},StateEnum.OPTIONS_SECTION,StateEnum.FACTORY_SECTION,StateEnum.GRAMMAR);
lexer.AddIdAction(85,"\""+"$("+"\"",StringCaseComparison.Sensitive,match => {lexer.PrependToken(SymbolEnum.CODE_SNIPPET, new CodeSnippet(str_buf.ToString(),code_statement));
                       code_statement = false;
                       str_buf.Clear();

                       match.Token = SymbolEnum.LMACRO;lexer.PushState(StateEnum.IN_CODE_MACRO);},StateEnum.CODE_BLOCK,StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(86,"\""+":"+"\"",StringCaseComparison.Sensitive,match => {if (lexer.NestingCounter > 0)
             str_buf.Append(match.Text);
           else
           {
                          if (str_buf.ToString().Trim().Length > 0)
               lexer.PrependToken(SymbolEnum.CODE_SNIPPET, new CodeSnippet(str_buf.ToString(),code_statement));

             str_buf.Clear();
             code_statement = false;
             match.Token = SymbolEnum.COLON;
           }},StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(87,"\""+"("+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);
           ++lexer.NestingCounter;},StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(88,"\""+")"+"\"",StringCaseComparison.Sensitive,match => {if (lexer.NestingCounter > 0)
           {
             str_buf.Append(match.Text);
             --lexer.NestingCounter;
           }
           else
           {
                          if (str_buf.ToString().Trim().Length > 0)
               lexer.PrependToken(SymbolEnum.CODE_SNIPPET, new CodeSnippet(str_buf.ToString(),code_statement));

             str_buf.Clear();
             code_statement = false;
             match.Token = SymbolEnum.RMACRO;
             lexer.PopState();
           }},StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(new[]{SymbolEnum.RARROW,SymbolEnum.IDENTIFIER},89,"\""+","+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.COMMA;
str_buf = new StringBuilder(); 
                                    code_statement = false;lexer.PushState(StateEnum.CODE_EXPR);},StateEnum.GRAMMAR);
lexer.AddIdRule(90,"\""+","+"\"",StringCaseComparison.Sensitive,SymbolEnum.COMMA,StateEnum.FACTORY_SECTION,StateEnum.OPTIONS_SECTION,StateEnum.GRAMMAR);
lexer.AddIdAction(91,"\""+";"+"\"",StringCaseComparison.Sensitive,match => {lexer.PrependToken(SymbolEnum.CODE_SNIPPET, new CodeSnippet(str_buf.ToString(),false));
                   match.Token = SymbolEnum.SEMI;
                   str_buf = null;lexer.PopState();},StateEnum.CODE_EXPR);
lexer.AddIdAction(92,"\""+"("+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.LPAREN;
str_buf = new StringBuilder(); 
      code_statement = false;lexer.PushState(StateEnum.CODE_BLOCK);},StateEnum.FACTORY_SECTION);
lexer.AddIdAction(93,"\""+"{"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.LBRACE;
str_buf = new StringBuilder(); 
                 code_statement = false;lexer.PushState(StateEnum.CODE_BLOCK);},StateEnum.FACTORY_SECTION,StateEnum.GRAMMAR);
lexer.AddIdAction(new[]{SymbolEnum.RARROW,SymbolEnum.IDENTIFIER,SymbolEnum.COMMA},94,"\""+"{"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.LBRACE;
lexer.PopState();                lexer.PushState(StateEnum.CODE_BLOCK);
               str_buf = new StringBuilder();
               code_statement = false;},StateEnum.CODE_EXPR);
lexer.AddIdAction(95,"\""+"{"+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);lexer.PushState(StateEnum.CODE_BLOCK);},StateEnum.CODE_BLOCK);
lexer.AddIdAction(96,"\""+"("+"\"",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);lexer.PushState(StateEnum.CODE_BLOCK);},StateEnum.CODE_BLOCK);
lexer.AddIdAction(97,"\""+"}"+"\"",StringCaseComparison.Sensitive,match => {lexer.PopState();
                    if (lexer.State != StateEnum.CODE_BLOCK)
                    {
                      lexer.PrependToken(SymbolEnum.CODE_SNIPPET, new CodeSnippet(str_buf.ToString(),code_statement));
                      str_buf = null;
                      match.Token = SymbolEnum.RBRACE;
                    }
                    else
                      str_buf.Append(match.Text);},StateEnum.CODE_BLOCK);
lexer.AddIdAction(98,"\""+")"+"\"",StringCaseComparison.Sensitive,match => {lexer.PopState();
                    if (lexer.State != StateEnum.CODE_BLOCK)
                    {
                      lexer.PrependToken(SymbolEnum.CODE_SNIPPET, new CodeSnippet(str_buf.ToString(),code_statement));
                      str_buf = null;
                      match.Token = SymbolEnum.RPAREN;
                    }
                    else
                      str_buf.Append(match.Text);},StateEnum.CODE_BLOCK);
lexer.AddIdAction(99,"/"+@"\$[A-Za-z_][A-Za-z_0-9]*"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CODE_PLACEHOLDER;
if (str_buf.Length>0)
                           lexer.PrependToken(SymbolEnum.CODE_SNIPPET, new CodeSnippet(str_buf.ToString(),code_statement));
                         str_buf.Clear();
                         code_statement = false;

                         match.Value = match.Text.Substring(1);},StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(100,"/"+@"[A-Za-z_][A-Za-z_0-9]*"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.IDENTIFIER;
if (str_buf.Length > 0)
                     lexer.PrependToken(SymbolEnum.CODE_SNIPPET, new CodeSnippet(str_buf.ToString(),code_statement));
                   str_buf.Clear();
                   code_statement = false;},StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(101,"\""+";"+"\"",StringCaseComparison.Sensitive,match => {code_statement = true;
                    str_buf.Append(match.Text);},StateEnum.CODE_BLOCK);
lexer.AddIdAction(102,"/"+@"."+"/",StringCaseComparison.Sensitive,match => {str_buf.Append(match.Text);},StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO);
lexer.AddIdAction(103,"\""+"/*"+"\"",StringCaseComparison.Sensitive,(TokenMatch<int> match) => {lexer.PushState(StateEnum.COMMENT);
},StateEnum.FACTORY_SECTION,StateEnum.OPTIONS_SECTION,StateEnum.CODE_BLOCK,StateEnum.COMMENT,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO,StateEnum.GRAMMAR);
lexer.AddIdAction(104,"\""+"*/"+"\"",StringCaseComparison.Sensitive,(TokenMatch<int> match) => {lexer.PopState();
},StateEnum.COMMENT);
lexer.AddIdAction(105,"/"+@".|\n|\r"+"/",StringCaseComparison.Sensitive,match => {},StateEnum.COMMENT);
lexer.AddIdAction(106,"\""+"*/"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.Error;
match.Value = "Unmatched */";},StateEnum.FACTORY_SECTION,StateEnum.OPTIONS_SECTION,StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO,StateEnum.GRAMMAR);
lexer.AddIdAction(107,"/"+@"//.*\n"+"/",StringCaseComparison.Sensitive,match => {},StateEnum.FACTORY_SECTION,StateEnum.OPTIONS_SECTION,StateEnum.CODE_BLOCK,StateEnum.CODE_EXPR,StateEnum.IN_CODE_MACRO,StateEnum.GRAMMAR);
return lexer;
}
}
}
