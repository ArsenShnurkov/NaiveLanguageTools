/* --------------------------------------------------------------------------
THIS FILE WAS AUTOMATICALLY GENERATED BY NLT SUITE FROM "NaiveLanguageTools.MultiRegex/RegexParser/Syntax.nlg" FILE
-------------------------------------------------------------------------- */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NaiveLanguageTools.Common;
using NaiveLanguageTools.Parser;
using NaiveLanguageTools.Parser.Automaton;
using NaiveLanguageTools.Parser.Symbols;
using NaiveLanguageTools.Lexer;
using NaiveLanguageTools.MultiRegex.Dfa;

namespace NaiveLanguageTools.MultiRegex.RegexParser
{
public enum StateEnum
{
INIT,
BRACKET,
BRACE
}
public partial class LexerFactory
{

public NaiveLanguageTools.Lexer.Lexer<SymbolEnum,StateEnum> CreateLexer()
{
var symbols_rep = StringRep.Create(Tuple.Create(SymbolEnum.Error,"Error"),
Tuple.Create(SymbolEnum.EOF,"EOF"),
Tuple.Create(SymbolEnum.LBRACKET,"LBRACKET"),
Tuple.Create(SymbolEnum.RBRACKET,"RBRACKET"),
Tuple.Create(SymbolEnum.LBRACE,"LBRACE"),
Tuple.Create(SymbolEnum.RBRACE,"RBRACE"),
Tuple.Create(SymbolEnum.COMMA,"COMMA"),
Tuple.Create(SymbolEnum.NUM,"NUM"),
Tuple.Create(SymbolEnum.PLUS,"PLUS"),
Tuple.Create(SymbolEnum.ASTERISK,"ASTERISK"),
Tuple.Create(SymbolEnum.QMARK,"QMARK"),
Tuple.Create(SymbolEnum.DOT,"DOT"),
Tuple.Create(SymbolEnum.OR,"OR"),
Tuple.Create(SymbolEnum.LPAREN,"LPAREN"),
Tuple.Create(SymbolEnum.RPAREN,"RPAREN"),
Tuple.Create(SymbolEnum.CLASS,"CLASS"),
Tuple.Create(SymbolEnum.CHAR,"CHAR"),
Tuple.Create(SymbolEnum.MINUS,"MINUS"),
Tuple.Create(SymbolEnum.NEG,"NEG"),
Tuple.Create(SymbolEnum.s,"s"),
Tuple.Create(SymbolEnum.bracket_elem,"bracket_elem"),
Tuple.Create(SymbolEnum.bracket,"bracket"),
Tuple.Create(SymbolEnum.rep,"rep"),
Tuple.Create(SymbolEnum.atom_expr,"atom_expr"),
Tuple.Create(SymbolEnum.expr,"expr"),
Tuple.Create(SymbolEnum.expr_concat,"expr_concat"),
Tuple.Create(SymbolEnum.alt_expr,"alt_expr"),
Tuple.Create(SymbolEnum.__list___merged_bracket_bracket_elem____,"__list___merged_bracket_bracket_elem____"),
Tuple.Create(SymbolEnum.__list___merged_expr_concat_expr____,"__list___merged_expr_concat_expr____"),
Tuple.Create(SymbolEnum.__list___merged_alt_expr_expr_concat____,"__list___merged_alt_expr_expr_concat____"));
var states_rep = StringRep.Create(Tuple.Create(StateEnum.INIT,"INIT"),
Tuple.Create(StateEnum.BRACKET,"BRACKET"),
Tuple.Create(StateEnum.BRACE,"BRACE"));
var mre = new DfaTable(ConnectionTable.Create(0,new int []{4,4,4,4,4,4,4,4,4,4,-1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,7,1,8,9,10,4,11,11,11,11,11,11,11,11,11,11,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,14,15,16,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,17,18,19,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}), //0
ConnectionTable.Create(-1,new int []{},Tuple.Create(0,false),Tuple.Create(32,false)), //1
ConnectionTable.Create(160,new int []{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}), //2
ConnectionTable.Create(128,new int []{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4}), //3
ConnectionTable.Create(-1,new int []{},Tuple.Create(32,false)), //4
ConnectionTable.Create(-1,new int []{},Tuple.Create(5,false),Tuple.Create(32,false)), //5
ConnectionTable.Create(-1,new int []{},Tuple.Create(6,false),Tuple.Create(32,false)), //6
ConnectionTable.Create(-1,new int []{},Tuple.Create(1,false),Tuple.Create(32,false)), //7
ConnectionTable.Create(-1,new int []{},Tuple.Create(29,false),Tuple.Create(32,false)), //8
ConnectionTable.Create(-1,new int []{},Tuple.Create(24,false),Tuple.Create(32,false)), //9
ConnectionTable.Create(-1,new int []{},Tuple.Create(3,false),Tuple.Create(32,false)), //10
ConnectionTable.Create(48,new int []{20,20,20,20,20,20,20,20,20,20},Tuple.Create(28,false),Tuple.Create(32,false)), //11
ConnectionTable.Create(-1,new int []{},Tuple.Create(2,false),Tuple.Create(32,false)), //12
ConnectionTable.Create(-1,new int []{},Tuple.Create(21,false),Tuple.Create(32,false)), //13
ConnectionTable.Create(0,new int []{23,23,23,23,23,23,23,23,23,23,-1,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,23,23,23,24,24,24,24,23,25,24,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,23,23,23,23,26,23,23,23,23,23,23,23,23,23,23,23,23,23,23,27,23,23,23,28,23,23,23,29,29,29,29,23,23,23,23,23,30,23,31,23,23,23,23,23,23,23,32,23,23,23,33,34,35,36,37,38,39,23,23,24,24,24,23,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21},Tuple.Create(31,false),Tuple.Create(32,false)), //14
ConnectionTable.Create(-1,new int []{},Tuple.Create(22,false),Tuple.Create(32,false)), //15
ConnectionTable.Create(-1,new int []{},Tuple.Create(25,false),Tuple.Create(32,false)), //16
ConnectionTable.Create(-1,new int []{},Tuple.Create(26,false),Tuple.Create(32,false)), //17
ConnectionTable.Create(-1,new int []{},Tuple.Create(4,false),Tuple.Create(32,false)), //18
ConnectionTable.Create(-1,new int []{},Tuple.Create(27,false),Tuple.Create(32,false)), //19
ConnectionTable.Create(48,new int []{20,20,20,20,20,20,20,20,20,20},Tuple.Create(28,false)), //20
ConnectionTable.Create(160,new int []{22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22}), //21
ConnectionTable.Create(128,new int []{23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23}), //22
ConnectionTable.Create(-1,new int []{},Tuple.Create(30,false)), //23
ConnectionTable.Create(-1,new int []{},Tuple.Create(20,false),Tuple.Create(30,false)), //24
ConnectionTable.Create(-1,new int []{},Tuple.Create(23,false),Tuple.Create(30,false)), //25
ConnectionTable.Create(-1,new int []{},Tuple.Create(8,false),Tuple.Create(30,false)), //26
ConnectionTable.Create(-1,new int []{},Tuple.Create(10,false),Tuple.Create(30,false)), //27
ConnectionTable.Create(-1,new int []{},Tuple.Create(12,false),Tuple.Create(30,false)), //28
ConnectionTable.Create(-1,new int []{},Tuple.Create(20,false),Tuple.Create(23,false),Tuple.Create(30,false)), //29
ConnectionTable.Create(-1,new int []{},Tuple.Create(7,false),Tuple.Create(30,false)), //30
ConnectionTable.Create(-1,new int []{},Tuple.Create(13,false),Tuple.Create(30,false)), //31
ConnectionTable.Create(-1,new int []{},Tuple.Create(14,false),Tuple.Create(30,false)), //32
ConnectionTable.Create(-1,new int []{},Tuple.Create(15,false),Tuple.Create(30,false)), //33
ConnectionTable.Create(-1,new int []{},Tuple.Create(9,false),Tuple.Create(30,false)), //34
ConnectionTable.Create(-1,new int []{},Tuple.Create(16,false),Tuple.Create(30,false)), //35
ConnectionTable.Create(48,new int []{40,40,40,40,40,40,40,40,40,40,-1,-1,-1,-1,-1,-1,-1,40,40,40,40,40,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,40,40,40,40,40,40},Tuple.Create(30,false)), //36
ConnectionTable.Create(-1,new int []{},Tuple.Create(17,false),Tuple.Create(30,false)), //37
ConnectionTable.Create(-1,new int []{},Tuple.Create(11,false),Tuple.Create(30,false)), //38
ConnectionTable.Create(48,new int []{41,41,41,41,41,41,41,41,41,41,-1,-1,-1,-1,-1,-1,-1,41,41,41,41,41,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,41,41,41,41,41,41},Tuple.Create(30,false)), //39
ConnectionTable.Create(48,new int []{42,42,42,42,42,42,42,42,42,42,-1,-1,-1,-1,-1,-1,-1,42,42,42,42,42,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,42,42,42,42,42,42}), //40
ConnectionTable.Create(48,new int []{43,43,43,43,43,43,43,43,43,43,-1,-1,-1,-1,-1,-1,-1,43,43,43,43,43,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,43,43,43,43,43,43}), //41
ConnectionTable.Create(48,new int []{44,44,44,44,44,44,44,44,44,44,-1,-1,-1,-1,-1,-1,-1,44,44,44,44,44,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,44,44,44,44,44,44}), //42
ConnectionTable.Create(-1,new int []{},Tuple.Create(18,false)), //43
ConnectionTable.Create(48,new int []{45,45,45,45,45,45,45,45,45,45,-1,-1,-1,-1,-1,-1,-1,45,45,45,45,45,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,45,45,45,45,45,45}), //44
ConnectionTable.Create(-1,new int []{},Tuple.Create(19,false))); //45
var lexer = new NaiveLanguageTools.Lexer.Lexer<SymbolEnum,StateEnum>(symbols_rep,states_rep,StateEnum.INIT,SymbolEnum.EOF,SymbolEnum.Error,mre);
lexer.AddIdRule(0,"\""+"+"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PLUS,StateEnum.INIT);
lexer.AddIdRule(1,"\""+"*"+"\"",StringCaseComparison.Sensitive,SymbolEnum.ASTERISK,StateEnum.INIT);
lexer.AddIdRule(2,"\""+"?"+"\"",StringCaseComparison.Sensitive,SymbolEnum.QMARK,StateEnum.INIT);
lexer.AddIdRule(3,"\""+"."+"\"",StringCaseComparison.Sensitive,SymbolEnum.DOT,StateEnum.INIT);
lexer.AddIdRule(4,"\""+"|"+"\"",StringCaseComparison.Sensitive,SymbolEnum.OR,StateEnum.INIT);
lexer.AddIdRule(5,"\""+"("+"\"",StringCaseComparison.Sensitive,SymbolEnum.LPAREN,StateEnum.INIT);
lexer.AddIdRule(6,"\""+")"+"\"",StringCaseComparison.Sensitive,SymbolEnum.RPAREN,StateEnum.INIT);
lexer.AddIdAction(7,"\""+"\\d"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CLASS;
match.Value = new CharClass(false,CharClass.Enum.Digit);},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(8,"\""+"\\D"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CLASS;
match.Value = new CharClass(true,CharClass.Enum.Digit);},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(9,"\""+"\\s"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CLASS;
match.Value = new CharClass(false,CharClass.Enum.WhiteSpace);},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(10,"\""+"\\S"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CLASS;
match.Value = new CharClass(true,CharClass.Enum.WhiteSpace);},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(11,"\""+"\\w"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CLASS;
match.Value = new CharClass(false,CharClass.Enum.Word);},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(12,"\""+"\\W"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CLASS;
match.Value = new CharClass(true,CharClass.Enum.Word);},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(13,"\""+"\\f"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = '\f';},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(14,"\""+"\\n"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = '\n';},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(15,"\""+"\\r"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = '\r';},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(16,"\""+"\\t"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = '\t';},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(17,"\""+"\\v"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = '\v';},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(18,"/"+@"\\x[\da-fA-F]{2}"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = StringExtensions.HexToChar(match.Text.Substring(2));},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(19,"/"+@"\\u[\da-fA-F]{4}"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = StringExtensions.HexToChar(match.Text.Substring(2));},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(20,"/"+@"\\[$?()*+.{}|\^\[\]\\]"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = match.Text[1];},StateEnum.INIT);
lexer.AddIdAction(21,"\""+"["+"\"",StringCaseComparison.Sensitive,match => {lexer.PushState(StateEnum.BRACKET);
         match.Token = SymbolEnum.LBRACKET;},StateEnum.INIT);
lexer.AddIdAction(22,"\""+"]"+"\"",StringCaseComparison.Sensitive,match => {lexer.PopState();
			  match.Token = SymbolEnum.RBRACKET;},StateEnum.BRACKET);
lexer.AddIdAction(23,"/"+@"\\[\[\]\-\^\\]"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = match.Text[1];},StateEnum.BRACKET);
lexer.AddIdRule(24,"\""+"-"+"\"",StringCaseComparison.Sensitive,SymbolEnum.MINUS,StateEnum.BRACKET);
lexer.AddIdRule(25,"\""+"^"+"\"",StringCaseComparison.Sensitive,SymbolEnum.NEG,StateEnum.BRACKET);
lexer.AddIdAction(26,"\""+"{"+"\"",StringCaseComparison.Sensitive,match => {lexer.PushState(StateEnum.BRACE);
         match.Token = SymbolEnum.LBRACE;},StateEnum.INIT);
lexer.AddIdAction(27,"\""+"}"+"\"",StringCaseComparison.Sensitive,match => {lexer.PopState();
			  match.Token = SymbolEnum.RBRACE;},StateEnum.BRACE);
lexer.AddIdAction(28,"/"+@"\d+"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.NUM;
match.Value = Convert.ToInt32(match.Text);},StateEnum.BRACE);
lexer.AddIdRule(29,"\""+","+"\"",StringCaseComparison.Sensitive,SymbolEnum.COMMA,StateEnum.BRACE);
lexer.AddIdAction(30,"/"+@"\\."+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.Error;
match.Value = "Unrecognized escape sequence \""+match.Text.Substring(1)+"\"";},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(31,"/"+@"\\"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.Error;
match.Value = "Empty escape sequence";},StateEnum.INIT,StateEnum.BRACKET);
lexer.AddIdAction(32,"/"+@"."+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.CHAR;
match.Value = match.Text.Single();},StateEnum.INIT,StateEnum.BRACKET);
lexer.EofAction =match => {if (lexer.IsValidEofState)
            match.Token = SymbolEnum.EOF;
          else  
          {
            match.Value = "Invalid state at EOF";
            match.Token = SymbolEnum.Error;
          }};
return lexer;
}
}
}
