/* --------------------------------------------------------------------------
THIS FILE WAS AUTOMATICALLY GENERATED BY NLT SUITE FROM "NaiveLanguageTools.Example/02.PatternsAndForking/Syntax.nlg" FILE
-------------------------------------------------------------------------- */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NaiveLanguageTools.Common;
using NaiveLanguageTools.Parser;
using NaiveLanguageTools.Parser.Automaton;
using NaiveLanguageTools.Parser.Symbols;
using NaiveLanguageTools.Lexer;
using NaiveLanguageTools.MultiRegex.Dfa;

namespace NaiveLanguageTools.Example.PatternsAndForking
{
public enum StateEnum
{
INIT
}
public partial class LexerFactory
{

public NaiveLanguageTools.Lexer.Lexer<SymbolEnum,StateEnum> CreateLexer()
{
var symbols_rep = StringRep.Create(Tuple.Create(SymbolEnum.Error,"Error"),
Tuple.Create(SymbolEnum.EOF,"EOF"),
Tuple.Create(SymbolEnum.PLUS,"PLUS"),
Tuple.Create(SymbolEnum.MINUS,"MINUS"),
Tuple.Create(SymbolEnum.LANGLE,"LANGLE"),
Tuple.Create(SymbolEnum.RANGLE,"RANGLE"),
Tuple.Create(SymbolEnum.comp,"comp"),
Tuple.Create(SymbolEnum.expr,"expr"),
Tuple.Create(SymbolEnum.NUM,"NUM"));
var states_rep = StringRep.Create(Tuple.Create(StateEnum.INIT,"INIT"));
var mre = new DfaTable(ConnectionTable.Create(32,new int []{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,6,-1,-1,3,3,3,3,3,3,3,3,3,3,-1,-1,5,-1,4}), //0
ConnectionTable.Create(-1,new int []{},Tuple.Create(0,false)), //1
ConnectionTable.Create(-1,new int []{},Tuple.Create(5,false)), //2
ConnectionTable.Create(48,new int []{3,3,3,3,3,3,3,3,3,3},Tuple.Create(4,false)), //3
ConnectionTable.Create(-1,new int []{},Tuple.Create(3,false)), //4
ConnectionTable.Create(-1,new int []{},Tuple.Create(2,false)), //5
ConnectionTable.Create(-1,new int []{},Tuple.Create(1,false))); //6
var lexer = new NaiveLanguageTools.Lexer.Lexer<SymbolEnum,StateEnum>(symbols_rep,states_rep,StateEnum.INIT,SymbolEnum.EOF,SymbolEnum.Error,mre);
lexer.AddIdRule(0,"\""+"+"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PLUS,StateEnum.INIT);
lexer.AddIdRule(1,"\""+"-"+"\"",StringCaseComparison.Sensitive,SymbolEnum.MINUS,StateEnum.INIT);
lexer.AddIdRule(2,"\""+"<"+"\"",StringCaseComparison.Sensitive,SymbolEnum.LANGLE,StateEnum.INIT);
lexer.AddIdRule(3,"\""+">"+"\"",StringCaseComparison.Sensitive,SymbolEnum.RANGLE,StateEnum.INIT);
lexer.AddIdAction(4,"/"+@"[0-9]+"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.NUM;
                match.Value = Convert.ToInt32(match.Text);},StateEnum.INIT);
lexer.AddIdAction(5,"\""+" "+"\"",StringCaseComparison.Sensitive,match => {},StateEnum.INIT);
lexer.EofAction =(TokenMatch<SymbolEnum> match) => match.Token = SymbolEnum.EOF;
return lexer;
}
}
}
