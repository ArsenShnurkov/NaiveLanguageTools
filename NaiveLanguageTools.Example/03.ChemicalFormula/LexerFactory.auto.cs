/* --------------------------------------------------------------------------
THIS FILE WAS AUTOMATICALLY GENERATED BY NLT SUITE FROM "NaiveLanguageTools.Example/03.ChemicalFormula/Syntax.nlg" FILE
-------------------------------------------------------------------------- */

using System.Collections.Generic;
using System.Linq;
using System;
using NaiveLanguageTools.Common;
using NaiveLanguageTools.Parser;
using NaiveLanguageTools.Parser.Automaton;
using NaiveLanguageTools.Parser.Symbols;
using NaiveLanguageTools.Lexer;
using NaiveLanguageTools.MultiRegex.Dfa;

namespace NaiveLanguageTools.Example.ChemicalFormula
{
public enum StateEnum
{
INIT
}
public partial class LexerFactory
{

public NaiveLanguageTools.Lexer.Lexer<SymbolEnum,StateEnum> CreateLexer()
{
var symbols_rep = StringRep.Create(Tuple.Create(SymbolEnum.Error,"Error"),
Tuple.Create(SymbolEnum.EOF,"EOF"),
Tuple.Create(SymbolEnum.LPAREN,"LPAREN"),
Tuple.Create(SymbolEnum.RPAREN,"RPAREN"),
Tuple.Create(SymbolEnum.NUM,"NUM"),
Tuple.Create(SymbolEnum.ATOM,"ATOM"),
Tuple.Create(SymbolEnum.comp,"comp"),
Tuple.Create(SymbolEnum.elem,"elem"),
Tuple.Create(SymbolEnum.__list___merged_elem_e____,"__list___merged_elem_e____"));
var states_rep = StringRep.Create(Tuple.Create(StateEnum.INIT,"INIT"));
var mre = new DfaTable(ConnectionTable.Create(40,new int []{1,4,-1,-1,-1,-1,-1,-1,3,3,3,3,3,3,3,3,3,3,-1,-1,-1,-1,-1,-1,-1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}), //0
ConnectionTable.Create(-1,new int []{},Tuple.Create(0,false)), //1
ConnectionTable.Create(97,new int []{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},Tuple.Create(3,false)), //2
ConnectionTable.Create(48,new int []{3,3,3,3,3,3,3,3,3,3},Tuple.Create(2,false)), //3
ConnectionTable.Create(-1,new int []{},Tuple.Create(1,false)), //4
ConnectionTable.Create(97,new int []{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},Tuple.Create(3,false))); //5
var lexer = new NaiveLanguageTools.Lexer.Lexer<SymbolEnum,StateEnum>(symbols_rep,states_rep,StateEnum.INIT,SymbolEnum.EOF,SymbolEnum.Error,mre);
lexer.AddIdRule(0,"\""+"("+"\"",StringCaseComparison.Sensitive,SymbolEnum.LPAREN,StateEnum.INIT);
lexer.AddIdRule(1,"\""+")"+"\"",StringCaseComparison.Sensitive,SymbolEnum.RPAREN,StateEnum.INIT);
lexer.AddIdAction(2,"/"+@"[0-9]+"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.NUM;
match.Value = Convert.ToInt32(match.Text);},StateEnum.INIT);
lexer.AddIdRule(3,"/"+@"[A-Z][a-z]*"+"/",StringCaseComparison.Sensitive,SymbolEnum.ATOM,StateEnum.INIT);
lexer.EofAction =(TokenMatch<SymbolEnum> match) => match.Token = SymbolEnum.EOF;
return lexer;
}
}
}
