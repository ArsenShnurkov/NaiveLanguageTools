/* --------------------------------------------------------------------------
THIS FILE WAS AUTOMATICALLY GENERATED BY NLT SUITE FROM "NaiveLanguageTools.Example/01.Calculator/Syntax.nlg" FILE
-------------------------------------------------------------------------- */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NaiveLanguageTools.Common;
using NaiveLanguageTools.Parser;
using NaiveLanguageTools.Parser.Automaton;
using NaiveLanguageTools.Parser.Symbols;
using NaiveLanguageTools.Lexer;
using NaiveLanguageTools.MultiRegex.Dfa;

namespace NaiveLanguageTools.Example.Calculator
{
public enum StateEnum
{
INIT,
COMMENT
}
public partial class LexerFactory
{

public NaiveLanguageTools.Lexer.Lexer<SymbolEnum,StateEnum> CreateLexer()
{
var symbols_rep = StringRep.Create(Tuple.Create(SymbolEnum.Error,"Error"),
Tuple.Create(SymbolEnum.EOF,"EOF"),
Tuple.Create(SymbolEnum.__term0,"__term0"),
Tuple.Create(SymbolEnum.__term1,"__term1"),
Tuple.Create(SymbolEnum.PLUS,"PLUS"),
Tuple.Create(SymbolEnum.MINUS,"MINUS"),
Tuple.Create(SymbolEnum.MULT,"MULT"),
Tuple.Create(SymbolEnum.DIV,"DIV"),
Tuple.Create(SymbolEnum.POWER,"POWER"),
Tuple.Create(SymbolEnum.s,"s"),
Tuple.Create(SymbolEnum.exp,"exp"),
Tuple.Create(SymbolEnum.NUM,"NUM"));
var states_rep = StringRep.Create(Tuple.Create(StateEnum.INIT,"INIT"),
Tuple.Create(StateEnum.COMMENT,"COMMENT"));
var mre = new DfaTable(ConnectionTable.Create(0,new int []{4,4,4,4,4,4,4,4,4,4,-1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,6,4,4,4,4,1,7,8,9,4,10,4,11,12,12,12,12,12,12,12,12,12,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}), //0
ConnectionTable.Create(-1,new int []{},Tuple.Create(0,false),Tuple.Create(10,false),Tuple.Create(11,false)), //1
ConnectionTable.Create(160,new int []{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}), //2
ConnectionTable.Create(128,new int []{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4}), //3
ConnectionTable.Create(-1,new int []{},Tuple.Create(10,false),Tuple.Create(11,false)), //4
ConnectionTable.Create(-1,new int []{},Tuple.Create(8,false),Tuple.Create(10,false),Tuple.Create(11,false)), //5
ConnectionTable.Create(-1,new int []{},Tuple.Create(9,false),Tuple.Create(10,false),Tuple.Create(11,false)), //6
ConnectionTable.Create(-1,new int []{},Tuple.Create(1,false),Tuple.Create(10,false),Tuple.Create(11,false)), //7
ConnectionTable.Create(-1,new int []{},Tuple.Create(4,false),Tuple.Create(10,false),Tuple.Create(11,false)), //8
ConnectionTable.Create(-1,new int []{},Tuple.Create(2,false),Tuple.Create(10,false),Tuple.Create(11,false)), //9
ConnectionTable.Create(-1,new int []{},Tuple.Create(3,false),Tuple.Create(10,false),Tuple.Create(11,false)), //10
ConnectionTable.Create(-1,new int []{},Tuple.Create(5,false),Tuple.Create(10,false),Tuple.Create(11,false)), //11
ConnectionTable.Create(48,new int []{14,14,14,14,14,14,14,14,14,14},Tuple.Create(7,false),Tuple.Create(10,false),Tuple.Create(11,false)), //12
ConnectionTable.Create(-1,new int []{},Tuple.Create(6,false),Tuple.Create(10,false),Tuple.Create(11,false)), //13
ConnectionTable.Create(48,new int []{14,14,14,14,14,14,14,14,14,14},Tuple.Create(7,false))); //14
var lexer = new NaiveLanguageTools.Lexer.Lexer<SymbolEnum,StateEnum>(symbols_rep,states_rep,StateEnum.INIT,SymbolEnum.EOF,SymbolEnum.Error,mre);
lexer.AddIdRule(0,"\""+"("+"\"",StringCaseComparison.Sensitive,SymbolEnum.__term0,StateEnum.INIT);
lexer.AddIdRule(1,"\""+")"+"\"",StringCaseComparison.Sensitive,SymbolEnum.__term1,StateEnum.INIT);
lexer.AddIdRule(2,"\""+"+"+"\"",StringCaseComparison.Sensitive,SymbolEnum.PLUS,StateEnum.INIT);
lexer.AddIdRule(3,"\""+"-"+"\"",StringCaseComparison.Sensitive,SymbolEnum.MINUS,StateEnum.INIT);
lexer.AddIdAction(4,"\""+"*"+"\"",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.MULT;
match.Value = SymbolEnum.MULT;},StateEnum.INIT);
lexer.AddIdRule(5,"\""+"/"+"\"",StringCaseComparison.Sensitive,SymbolEnum.DIV,StateEnum.INIT);
lexer.AddIdRule(6,"\""+"^"+"\"",StringCaseComparison.Sensitive,SymbolEnum.POWER,StateEnum.INIT);
lexer.AddIdAction(7,"/"+@"[0-9]+"+"/",StringCaseComparison.Sensitive,match => {match.Token = SymbolEnum.NUM;
                match.Value = Convert.ToDouble(match.Text);},StateEnum.INIT);
lexer.AddIdAction(8,"\""+" "+"\"",StringCaseComparison.Sensitive,match => {},StateEnum.INIT);
lexer.AddIdAction(9,"\""+"#"+"\"",StringCaseComparison.Sensitive,match => {lexer.PushState(StateEnum.COMMENT);},StateEnum.INIT);
lexer.AddIdAction(10,"/"+@"."+"/",StringCaseComparison.Sensitive,match => {},StateEnum.COMMENT);
lexer.AddIdRule(11,"/"+@"."+"/",StringCaseComparison.Sensitive,SymbolEnum.Error,StateEnum.INIT);
lexer.EofAction =(TokenMatch<SymbolEnum> match) => match.Token = SymbolEnum.EOF;
return lexer;
}
}
}
