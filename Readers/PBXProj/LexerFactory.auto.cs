/* --------------------------------------------------------------------------
THIS FILE WAS AUTOMATICALLY GENERATED BY NLT SUITE FROM "Readers/PBXProj/Syntax.nlg" FILE
-------------------------------------------------------------------------- */

using System.Collections.Generic;
using System.Linq;
using System;
using NaiveLanguageTools.Common;
using NaiveLanguageTools.Parser;
using NaiveLanguageTools.Parser.Automaton;
using NaiveLanguageTools.Parser.Symbols;
using NaiveLanguageTools.Lexer;
using NaiveLanguageTools.MultiRegex.Dfa;

namespace PBXProj
{
public enum StateEnum
{
INIT,
STR,
COMMENT
}
public partial class LexerFactory
{

public NaiveLanguageTools.Lexer.Lexer<TokenEnum,StateEnum> CreateLexer()
{
var symbols_rep = StringRep.Create(Tuple.Create(TokenEnum.Error,"Error"),
Tuple.Create(TokenEnum.EOF,"EOF"),
Tuple.Create(TokenEnum.STR,"STR"),
Tuple.Create(TokenEnum.LBRACE,"LBRACE"),
Tuple.Create(TokenEnum.LPAREN,"LPAREN"),
Tuple.Create(TokenEnum.RPAREN,"RPAREN"),
Tuple.Create(TokenEnum.RBRACE,"RBRACE"),
Tuple.Create(TokenEnum.EQ,"EQ"),
Tuple.Create(TokenEnum.SEMI,"SEMI"),
Tuple.Create(TokenEnum.COMMA,"COMMA"),
Tuple.Create(TokenEnum.ID,"ID"),
Tuple.Create(TokenEnum.proj,"proj"),
Tuple.Create(TokenEnum.pair,"pair"),
Tuple.Create(TokenEnum.dict,"dict"),
Tuple.Create(TokenEnum.list,"list"),
Tuple.Create(TokenEnum.id_list,"id_list"),
Tuple.Create(TokenEnum.str_list,"str_list"),
Tuple.Create(TokenEnum.dict_list,"dict_list"),
Tuple.Create(TokenEnum.__list___merged_dict_pair____,"__list___merged_dict_pair____"),
Tuple.Create(TokenEnum.__optList___merged_dict_pair____,"__optList___merged_dict_pair____"),
Tuple.Create(TokenEnum.__list___merged_id_list_ID____,"__list___merged_id_list_ID____"),
Tuple.Create(TokenEnum.__optList___merged_id_list_ID____,"__optList___merged_id_list_ID____"),
Tuple.Create(TokenEnum.__list___merged_str_list_STR____,"__list___merged_str_list_STR____"),
Tuple.Create(TokenEnum.__list___merged_dict_list_dict____,"__list___merged_dict_list_dict____"));
var states_rep = StringRep.Create(Tuple.Create(StateEnum.INIT,"INIT"),
Tuple.Create(StateEnum.STR,"STR"),
Tuple.Create(StateEnum.COMMENT,"COMMENT"));
var mre = new DfaTable(ConnectionTable.Create(0,new int []{6,18,18,18,18,18,18,18,18,5,2,5,5,5,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,5,18,8,18,18,18,18,18,15,14,3,18,10,18,18,4,9,9,9,9,9,9,9,9,9,9,18,11,18,12,18,18,18,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,18,7,18,18,9,18,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,18,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-1,-1,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16}), //0
ConnectionTable.Create(-1,new int []{},Tuple.Create(0,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //1
ConnectionTable.Create(-1,new int []{},Tuple.Create(14,false),Tuple.Create(20,false),Tuple.Create(26,false),Tuple.Create(28,false)), //2
ConnectionTable.Create(47,new int []{19},Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //3
ConnectionTable.Create(42,new int []{20,-1,-1,-1,-1,21},Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //4
ConnectionTable.Create(-1,new int []{},Tuple.Create(18,false),Tuple.Create(19,false),Tuple.Create(25,false),Tuple.Create(27,false)), //5
ConnectionTable.Create(-1,new int []{},Tuple.Create(17,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //6
ConnectionTable.Create(0,new int []{22,30,30,30,30,30,30,30,30,30,23,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,27,30,30,30,24,30,30,30,30,30,30,30,25,30,30,30,30,30,26,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-1,-1,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28},Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //7
ConnectionTable.Create(-1,new int []{},Tuple.Create(8,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //8
ConnectionTable.Create(48,new int []{31,31,31,31,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-1,-1,-1,-1,31,-1,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31},Tuple.Create(7,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //9
ConnectionTable.Create(-1,new int []{},Tuple.Create(6,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //10
ConnectionTable.Create(-1,new int []{},Tuple.Create(5,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //11
ConnectionTable.Create(-1,new int []{},Tuple.Create(4,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //12
ConnectionTable.Create(-1,new int []{},Tuple.Create(3,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //13
ConnectionTable.Create(-1,new int []{},Tuple.Create(2,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //14
ConnectionTable.Create(-1,new int []{},Tuple.Create(1,false),Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //15
ConnectionTable.Create(160,new int []{17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17}), //16
ConnectionTable.Create(13,new int []{18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18}), //17
ConnectionTable.Create(-1,new int []{},Tuple.Create(18,false),Tuple.Create(25,false),Tuple.Create(27,false)), //18
ConnectionTable.Create(-1,new int []{},Tuple.Create(23,false),Tuple.Create(24,false)), //19
ConnectionTable.Create(-1,new int []{},Tuple.Create(22,false)), //20
ConnectionTable.Create(0,new int []{},Tuple.Create(21,false)), //21
ConnectionTable.Create(-1,new int []{},Tuple.Create(15,false),Tuple.Create(16,false)), //22
ConnectionTable.Create(-1,new int []{},Tuple.Create(13,false)), //23
ConnectionTable.Create(-1,new int []{},Tuple.Create(12,false),Tuple.Create(16,false)), //24
ConnectionTable.Create(-1,new int []{},Tuple.Create(11,false),Tuple.Create(16,false)), //25
ConnectionTable.Create(-1,new int []{},Tuple.Create(10,false),Tuple.Create(16,false)), //26
ConnectionTable.Create(-1,new int []{},Tuple.Create(9,false),Tuple.Create(16,false)), //27
ConnectionTable.Create(160,new int []{29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29}), //28
ConnectionTable.Create(13,new int []{30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30}), //29
ConnectionTable.Create(-1,new int []{},Tuple.Create(16,false)), //30
ConnectionTable.Create(48,new int []{31,31,31,31,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-1,-1,-1,-1,31,-1,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31},Tuple.Create(7,false)), //31
ConnectionTable.Create(160,new int []{34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34}), //32
ConnectionTable.Create(0,new int []{33,33,33,33,33,33,33,33,33,33,35,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-1,-1,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32},Tuple.Create(21,false)), //33
ConnectionTable.Create(13,new int []{33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33}), //34
ConnectionTable.Create(-1,new int []{},Tuple.Create(21,false))); //35
var lexer = new NaiveLanguageTools.Lexer.Lexer<TokenEnum,StateEnum>(symbols_rep,states_rep,StateEnum.INIT,TokenEnum.EOF,TokenEnum.Error,mre);
lexer.AddIdRule(0,"\""+"{"+"\"",StringCaseComparison.Sensitive,TokenEnum.LBRACE,StateEnum.INIT);
lexer.AddIdRule(1,"\""+"("+"\"",StringCaseComparison.Sensitive,TokenEnum.LPAREN,StateEnum.INIT);
lexer.AddIdRule(2,"\""+")"+"\"",StringCaseComparison.Sensitive,TokenEnum.RPAREN,StateEnum.INIT);
lexer.AddIdRule(3,"\""+"}"+"\"",StringCaseComparison.Sensitive,TokenEnum.RBRACE,StateEnum.INIT);
lexer.AddIdRule(4,"\""+"="+"\"",StringCaseComparison.Sensitive,TokenEnum.EQ,StateEnum.INIT);
lexer.AddIdRule(5,"\""+";"+"\"",StringCaseComparison.Sensitive,TokenEnum.SEMI,StateEnum.INIT);
lexer.AddIdRule(6,"\""+","+"\"",StringCaseComparison.Sensitive,TokenEnum.COMMA,StateEnum.INIT);
lexer.AddIdRule(7,"/"+@"[A-Za-z_0-9]+"+"/",StringCaseComparison.Sensitive,TokenEnum.ID,StateEnum.INIT);
lexer.AddIdAction(8,"\""+"\""+"\"",StringCaseComparison.Sensitive,match => {if (!string_error)
                    validateString(match, false);
                    lexer.PopState();},StateEnum.STR);
lexer.AddIdAction(9,"\""+"\\b"+"\"",StringCaseComparison.Sensitive,match => {string_buf.Append("\b");},StateEnum.STR);
lexer.AddIdAction(10,"\""+"\\t"+"\"",StringCaseComparison.Sensitive,match => {string_buf.Append("\t");},StateEnum.STR);
lexer.AddIdAction(11,"\""+"\\n"+"\"",StringCaseComparison.Sensitive,match => {string_buf.Append("\n");},StateEnum.STR);
lexer.AddIdAction(12,"\""+"\\f"+"\"",StringCaseComparison.Sensitive,match => {string_buf.Append("\f");},StateEnum.STR);
lexer.AddIdAction(13,"\""+"\\\n"+"\"",StringCaseComparison.Sensitive,match => {string_buf.Append("\n");},StateEnum.STR);
lexer.AddIdAction(14,"\""+"\n"+"\"",StringCaseComparison.Sensitive,match => {if (!string_error)
                        validateString(match, true);
                      lexer.PopState();},StateEnum.STR);
lexer.AddIdAction(15,"\""+"\\\0"+"\"",StringCaseComparison.Sensitive,match => {if (!string_error)
                        {
                          string_error = true;
                          match.Value = "String contains escaped null character.";
                          match.Token = TokenEnum.Error;
                        }},StateEnum.STR);
lexer.AddIdAction(16,"/"+@"\\(.|\r)"+"/",StringCaseComparison.Sensitive,match => {string_buf.Append(match.Text.Substring(1));},StateEnum.STR);
lexer.AddIdAction(17,"\""+"\0"+"\"",StringCaseComparison.Sensitive,match => {if (!string_error)
                      {
                        string_error = true;
                        match.Value = "String contains null character.";
                        match.Token = TokenEnum.Error;
                      }},StateEnum.STR);
lexer.AddIdAction(18,"/"+@".|\r"+"/",StringCaseComparison.Sensitive,match => {string_buf.Append(match.Text);},StateEnum.STR);
lexer.AddIdAction(19,"/"+@"[ \f\r\t\u000b]"+"/",StringCaseComparison.Sensitive,match => {},StateEnum.INIT);
lexer.AddIdAction(20,"\""+"\n"+"\"",StringCaseComparison.Sensitive,match => {},StateEnum.INIT);
lexer.AddIdAction(21,"/"+@"//(\r|.)*[\n]?"+"/",StringCaseComparison.Sensitive,match => {},StateEnum.INIT);
lexer.AddIdAction(22,"\""+"/*"+"\"",StringCaseComparison.Sensitive,match => {lexer.PushState(StateEnum.COMMENT);},StateEnum.INIT,StateEnum.COMMENT);
lexer.AddIdAction(23,"\""+"*/"+"\"",StringCaseComparison.Sensitive,match => {lexer.PopState();},StateEnum.COMMENT);
lexer.AddIdAction(24,"\""+"*/"+"\"",StringCaseComparison.Sensitive,match => {match.Value = "Unmatched */"; 
          match.Token = TokenEnum.Error;},StateEnum.INIT);
lexer.AddIdAction(25,"/"+@".|\r"+"/",StringCaseComparison.Sensitive,match => {},StateEnum.COMMENT);
lexer.AddIdAction(26,"\""+"\n"+"\"",StringCaseComparison.Sensitive,match => {},StateEnum.COMMENT);
lexer.AddIdRule(27,"/"+@".|\r"+"/",StringCaseComparison.Sensitive,TokenEnum.Error,StateEnum.INIT);
lexer.AddIdRule(28,"\""+"\n"+"\"",StringCaseComparison.Sensitive,TokenEnum.Error,StateEnum.INIT);
lexer.EofAction =match => {if (!lexer.IsValidEofState)
                {
                    match.Value = "Invalid state at EOF";
                    match.Token = TokenEnum.Error;
                }
                else 
                {
                    match.Token = TokenEnum.EOF;
                }};
return lexer;
}
}
}
