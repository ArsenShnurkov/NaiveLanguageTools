/* --------------------------------------------------------------------------
THIS FILE WAS AUTOMATICALLY GENERATED BY NLT SUITE FROM "Readers/Calculator/Syntax.nlg" FILE
-------------------------------------------------------------------------- */

using System.Text;
using System.Collections.Generic;
using System.Linq;
using System;
using NaiveLanguageTools.Common;
using NaiveLanguageTools.Parser;
using NaiveLanguageTools.Parser.Automaton;
using NaiveLanguageTools.Parser.Symbols;
using NaiveLanguageTools.Lexer;
using NaiveLanguageTools.MultiRegex.Dfa;

namespace Calculator
{
public enum StateEnum
{
INIT
}
public partial class LexerFactory
{

public NaiveLanguageTools.Lexer.Lexer<TokenEnum,StateEnum> CreateLexer()
{
var symbols_rep = StringRep.Create(Tuple.Create(TokenEnum.Error,"Error"),
Tuple.Create(TokenEnum.EOF,"EOF"),
Tuple.Create(TokenEnum.__term0,"__term0"),
Tuple.Create(TokenEnum.__term1,"__term1"),
Tuple.Create(TokenEnum.sin,"sin"),
Tuple.Create(TokenEnum.cos,"cos"),
Tuple.Create(TokenEnum.sqrt,"sqrt"),
Tuple.Create(TokenEnum.pi,"pi"),
Tuple.Create(TokenEnum.e,"e"),
Tuple.Create(TokenEnum.PLUS,"PLUS"),
Tuple.Create(TokenEnum.MINUS,"MINUS"),
Tuple.Create(TokenEnum.MULT,"MULT"),
Tuple.Create(TokenEnum.DIV,"DIV"),
Tuple.Create(TokenEnum.POWER,"POWER"),
Tuple.Create(TokenEnum.NUM,"NUM"),
Tuple.Create(TokenEnum.s,"s"),
Tuple.Create(TokenEnum.exp,"exp"));
var states_rep = StringRep.Create(Tuple.Create(StateEnum.INIT,"INIT"));
var mre = new DfaTable(ConnectionTable.Create(0,new int []{4,4,4,4,4,4,4,4,4,4,-1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,4,1,6,7,8,4,9,4,10,11,11,11,11,11,11,11,11,11,11,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,13,4,14,4,4,4,4,4,4,4,4,4,4,15,4,4,16,4,4,4,4,4,4,4,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}), //0
ConnectionTable.Create(-1,new int []{},Tuple.Create(0,false),Tuple.Create(14,false)), //1
ConnectionTable.Create(160,new int []{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}), //2
ConnectionTable.Create(128,new int []{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4}), //3
ConnectionTable.Create(-1,new int []{},Tuple.Create(14,false)), //4
ConnectionTable.Create(-1,new int []{},Tuple.Create(13,false),Tuple.Create(14,false)), //5
ConnectionTable.Create(-1,new int []{},Tuple.Create(1,false),Tuple.Create(14,false)), //6
ConnectionTable.Create(-1,new int []{},Tuple.Create(9,false),Tuple.Create(14,false)), //7
ConnectionTable.Create(-1,new int []{},Tuple.Create(7,false),Tuple.Create(14,false)), //8
ConnectionTable.Create(-1,new int []{},Tuple.Create(8,false),Tuple.Create(14,false)), //9
ConnectionTable.Create(-1,new int []{},Tuple.Create(10,false),Tuple.Create(14,false)), //10
ConnectionTable.Create(46,new int []{17,-1,18,18,18,18,18,18,18,18,18,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19},Tuple.Create(12,false),Tuple.Create(14,false)), //11
ConnectionTable.Create(-1,new int []{},Tuple.Create(11,false),Tuple.Create(14,false)), //12
ConnectionTable.Create(111,new int []{20},Tuple.Create(14,false)), //13
ConnectionTable.Create(-1,new int []{},Tuple.Create(6,false),Tuple.Create(14,false)), //14
ConnectionTable.Create(105,new int []{21},Tuple.Create(14,false)), //15
ConnectionTable.Create(105,new int []{23,-1,-1,-1,-1,-1,-1,-1,22},Tuple.Create(14,false)), //16
ConnectionTable.Create(48,new int []{24,24,24,24,24,24,24,24,24,24}), //17
ConnectionTable.Create(46,new int []{17,-1,18,18,18,18,18,18,18,18,18,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19},Tuple.Create(12,false)), //18
ConnectionTable.Create(43,new int []{25,-1,25,-1,-1,26,26,26,26,26,26,26,26,26,26}), //19
ConnectionTable.Create(115,new int []{27}), //20
ConnectionTable.Create(-1,new int []{},Tuple.Create(5,false)), //21
ConnectionTable.Create(114,new int []{28}), //22
ConnectionTable.Create(110,new int []{29}), //23
ConnectionTable.Create(48,new int []{24,24,24,24,24,24,24,24,24,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19},Tuple.Create(12,false)), //24
ConnectionTable.Create(48,new int []{26,26,26,26,26,26,26,26,26,26}), //25
ConnectionTable.Create(48,new int []{26,26,26,26,26,26,26,26,26,26},Tuple.Create(12,false)), //26
ConnectionTable.Create(-1,new int []{},Tuple.Create(3,false)), //27
ConnectionTable.Create(116,new int []{30}), //28
ConnectionTable.Create(-1,new int []{},Tuple.Create(2,false)), //29
ConnectionTable.Create(-1,new int []{},Tuple.Create(4,false))); //30
var lexer = new NaiveLanguageTools.Lexer.Lexer<TokenEnum,StateEnum>(symbols_rep,states_rep,StateEnum.INIT,TokenEnum.EOF,TokenEnum.Error,mre);
lexer.AddIdRule(0,"\""+"("+"\"",StringCaseComparison.Sensitive,TokenEnum.__term0,StateEnum.INIT);
lexer.AddIdRule(1,"\""+")"+"\"",StringCaseComparison.Sensitive,TokenEnum.__term1,StateEnum.INIT);
lexer.AddIdRule(2,"\""+"sin"+"\"",StringCaseComparison.Sensitive,TokenEnum.sin,StateEnum.INIT);
lexer.AddIdRule(3,"\""+"cos"+"\"",StringCaseComparison.Sensitive,TokenEnum.cos,StateEnum.INIT);
lexer.AddIdRule(4,"\""+"sqrt"+"\"",StringCaseComparison.Sensitive,TokenEnum.sqrt,StateEnum.INIT);
lexer.AddIdRule(5,"\""+"pi"+"\"",StringCaseComparison.Sensitive,TokenEnum.pi,StateEnum.INIT);
lexer.AddIdRule(6,"\""+"e"+"\"",StringCaseComparison.Sensitive,TokenEnum.e,StateEnum.INIT);
lexer.AddIdRule(7,"\""+"+"+"\"",StringCaseComparison.Sensitive,TokenEnum.PLUS,StateEnum.INIT);
lexer.AddIdRule(8,"\""+"-"+"\"",StringCaseComparison.Sensitive,TokenEnum.MINUS,StateEnum.INIT);
lexer.AddIdRule(9,"\""+"*"+"\"",StringCaseComparison.Sensitive,TokenEnum.MULT,StateEnum.INIT);
lexer.AddIdRule(10,"\""+"/"+"\"",StringCaseComparison.Sensitive,TokenEnum.DIV,StateEnum.INIT);
lexer.AddIdRule(11,"\""+"^"+"\"",StringCaseComparison.Sensitive,TokenEnum.POWER,StateEnum.INIT);
lexer.AddIdAction(12,"/"+@"[0-9]+(\.[0-9]+)?([Ee][\-+]?[0-9]+)?"+"/",StringCaseComparison.Sensitive,match => {match.Token = TokenEnum.NUM;
match.Value = Convert.ToDouble(match.Text,System.Globalization.CultureInfo.InvariantCulture);},StateEnum.INIT);
lexer.AddIdAction(13,"\""+" "+"\"",StringCaseComparison.Sensitive,match => {},StateEnum.INIT);
lexer.AddIdRule(14,"/"+@"."+"/",StringCaseComparison.Sensitive,TokenEnum.Error,StateEnum.INIT);
lexer.EofAction =(TokenMatch<TokenEnum> match) => match.Token = TokenEnum.EOF;
return lexer;
}
}
}
